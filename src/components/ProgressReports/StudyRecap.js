import {GetAuthentication} from "../Authentication/Authentification";
import {filterEventsByDate, getEventList, timeStringToDateObject, getTimeDifference} from "../Calendar/CommonFunctions";
import {useMemo, useState} from "react";
import {StudyRoomCard} from "../StudyRoom/CommonResources";
import {TimePicker} from '@mui/x-date-pickers/TimePicker';
import * as React from "react";
import {AdapterDayjs} from "@mui/x-date-pickers/AdapterDayjs";
import {LocalizationProvider} from "@mui/x-date-pickers";
import TextField from '@mui/material/TextField';
import {PrimaryButton2} from "../CustomMUIComponents/CustomButtons";
import axios from "axios";

export default function StudyRecap(props) {
    const [eventsList, setEventsList] = useState([]);
    const [errorMessage, setErrorMessage] = useState('');

    useMemo(() => {
        getEventList(GetAuthentication().username).then((res) => {
            let studyEventList = filterEventsByDate(res, new Date()).filter(item => item.type === 'study');
            studyEventList.forEach((item) => {
                if (!item.studyHoursConfirmed) // default event actualStartTime to event startTime if actualStartTime is not set
                    item.actualStartTime = item.startTime;
                if (!item.studyHoursConfirmed) // default event actualEndTime to event endTime if actualEndTime is not set
                    item.actualEndTime = item.endTime;
            })
            setEventsList([...studyEventList]);
        }).catch((err) => {
            setErrorMessage(err.message);
        })
    }, [])

    /**
     * method to update events in the database on confirmation of study times
     * @param e
     */
    const handleStudyRecapConfirm = (e) => {
        e.preventDefault();

        eventsList.forEach((event, index) => {
            event.studyHoursConfirmed = true;

            axios.post(`${process.env.REACT_APP_BASE_URL}events/update`, event)
                .then(() => {
                    if (eventsList.length - 1 === index) {
                        if (props.notificationCount && props.notificationCountSetter) props.notificationCountSetter(props.notificationCount - 1);
                        document.elementFromPoint(0, 0).click();
                    }
                })
                .catch(err => {
                    setErrorMessage(err.message);
                });
        })
    }

    /**
     * method to set actualEndTime such that the difference between actualEndTime and actualStartTime reflects the study time
     * @param {int} index, index of event object (to be updated with study time change) in the eventsList
     * @param e, time object generated by MUI TimePicker; reflects study time selected by user
     */
    const handleTimeChange = (index, e) => {
        const tempEventsList = [...eventsList];
        const actualStartTime = new Date(tempEventsList[index].actualStartTime);
        const actualEndTime = new Date(tempEventsList[index].actualEndTime);
        e = new Date(e);
        actualEndTime.setHours(actualStartTime.getHours() + e.getHours());
        actualEndTime.setMinutes(actualStartTime.getMinutes() + e.getMinutes());
        tempEventsList[index].actualEndTime = actualEndTime.toISOString();
        setEventsList(tempEventsList);
    }

    /**
     * method to generate time pickers for each event in the eventsList
     * @param {int} index, index of event object in the eventsList state for which TimePicker is generated
     * @param {Function} onChange, reference to function to be executed on study time change
     * @param {String} mode, display mode for time picker; 'hours': displays hour picker only, 'minutes': displays minute picker only, 'hours-minutes'(default): displays both hour and minute pickers
     * @returns {JSX.Element}, returns the relevant time pickers populated with the time difference of the specified event's index
     */
    const generateTimePicker = (index, onChange, mode = 'hours-minutes') => {
        const timeDiff = timeStringToDateObject(getTimeDifference(eventsList[index].actualStartTime, eventsList[index].actualEndTime));

        return (<LocalizationProvider dateAdapter={AdapterDayjs}>
            {mode === 'hours-minutes' || mode === 'hours' ? <TimePicker
                ampm={false}
                openTo="hours"
                views={['hours']}
                inputFormat="HH"
                mask="__"
                label="Hours"
                value={timeDiff}
                onChange={(e) => {
                    onChange(index, e)
                }}
                renderInput={(params) => <TextField {...params}
                                                    inputProps={{...params.inputProps, readOnly: true}}
                                                    size='small' sx={{width: '10ch'}}/>}
            /> : null}
            {mode === 'hours-minutes' || mode === 'minutes' ? <TimePicker
                ampm={false}
                openTo="minutes"
                views={['minutes']}
                inputFormat="mm"
                mask="__"
                label="Minutes"
                value={timeDiff}
                closeOnSelect={false}
                onChange={(e) => {
                    onChange(index, e)
                }}
                renderInput={(params) => <TextField {...params}
                                                    inputProps={{...params.inputProps, readOnly: true}}
                                                    size='small' sx={{width: '10ch'}}/>}
            /> : null}
        </LocalizationProvider>);
    }

    return (<div style={{width: '90vw'}}>
        <h3>Study Hours Today</h3>
        <div style={{color: 'red'}}>{errorMessage}</div>
        {eventsList.map((item, index) => {
            return (<div key={item._id}>
                <StudyRoomCard width={'100%'} height={'fit-content'} content={<div style={{
                    margin: '5px', display: 'flex', alignItems: 'center'
                }}>
                    Event: {item.eventHeader} Course: {item.subject}{item.catalog} Study
                    Time: {generateTimePicker(index, handleTimeChange, 'hours')}hours {generateTimePicker(index, handleTimeChange, 'minutes')}minutes
                </div>}
                />
            </div>)
        })}
        <div style={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            position: "fixed",
            bottom: "30px",
            background: "white"
        }}>
            <div id={"confirmStudyRecap"}>
                <PrimaryButton2 content={"Confirm"} colour={'#912338'} width={"90vw"}
                                onClick={handleStudyRecapConfirm}/>
            </div>
        </div>
    </div>)
}